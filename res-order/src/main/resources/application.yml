spring:
  redis:
    #服务器地址
    host: 127.0.0.1
    #服务器连接端口
    port: 6380
    #数据库密码
    password: a
    #数据库索引
    database: 3
    #连接超时时间
    connect-timeout: 10000ms
    #jedis配置
    jedis:
      pool:
        #连接池最大连接数（负数表示没有限制）
        max-active: -1
        #连接池最大阻塞等待时间
        max-wait: -1ms
        #连接池最大空闲连接数
        max-idle: 10
        #连接池最小空闲连接数
        min-idle: 0

  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher #swagger的路径匹配方式
  datasource:
    username: root
    password: 4444
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/yc125res?serverTimezone=UTC # 此处连接的是本地数据源
    type: com.alibaba.druid.pool.DruidDataSource
    # Druid的其他属性配置
    druid:
      # 初始化时建立物理连接的个数
      initial-size: 5
      # 连接池的最小空闲数量
      min-idle: 5
      # 连接池最大连接数量
      max-active: 20
      # 获取连接时最大等待时间，单位毫秒
      max-wait: 60000
      # 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      test-while-idle: true
      # 既作为检测的间隔时间又作为testWhileIdel执行的依据
      time-between-eviction-runs-millis: 60000
      # 销毁线程时检测当前连接的最后活动时间和当前时间差大于该值时，关闭当前连接(配置连接在池中的最小生存时间)
      min-evictable-idle-time-millis: 30000
      # 用来检测数据库连接是否有效的sql 必须是一个查询语句(oracle中为 select 1 from dual)
      validation-query: select 'x'
      # 申请连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-borrow: false
      # 归还连接时会执行validationQuery检测连接是否有效,开启会降低性能,默认为true
      test-on-return: false
      # 是否缓存preparedStatement, 也就是PSCache,PSCache对支持游标的数据库性能提升巨大，比如说oracle,在mysql下建议关闭。
      pool-prepared-statements: false
      # 置监控统计拦截的filters，去掉后监控界面sql无法统计，stat: 监控统计、Slf4j:日志记录、waLL: 防御sqL注入
      filters: stat,wall,slf4j
      # 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      max-pool-prepared-statement-per-connection-size: -1
      # 合并多个DruidDataSource的监控数据
      use-global-data-source-stat: true
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      #connect-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

      web-stat-filter:
        # 是否启用StatFilter默认值true
        enabled: true
        # 添加过滤规则
        url-pattern: /*
        # 忽略过滤的格式
        exclusions: /druid/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico
      stat-view-servlet:
        # 是否启用StatViewServlet默认值true
        enabled: true
        # 访问路径为/druid时，跳转到StatViewServlet
        url-pattern: /druid/*
        # 是否能够重置数据
        reset-enable: false
        # 需要账号密码才能访问控制台，默认为root
        login-username: druid
        login-password: druid
        # IP白名单
        allow: 127.0.0.1 #上线后将密码设置复杂，且允许远程访问
        # IP黑名单（共同存在时，deny优先于allow）
        deny:

  devtools:
    restart:
      enabled: true
      additional-paths: src/main/java # 自动监控java源码的变化，如发生改变，自动编译项目
      exclude: static/**

  cloud:
    nacos:
      discovery: #cloud的服务注册发现功能
        #namespace: yctest125
        server-addr: localhost:8848   #将此服务注册到本机的nacos中
        username: nacos               #nacos登录用户名和密码
        password: nacos
    sentinel: #sentinel配置
      transport:
        port: 8719  #跟控制台交流的端口
        dashboard: localhost:9999  #sentinel地址和端口号
      eager: true #表示sentinel会在应用启动的时候初始化 sentinel会自动加载规则 实时监控
  sleuth: #链路追踪
    web:
      client:
        #开启采集链路
        enabled: true
    sampler:
      #默认采集是 0.1 生产环境采用默认 测试环境可以修改为1.0 采集比例 多久采集一次
      probability: 1.0
  zipkin: #zipkin服务地址
    base-url: http://localhost:9411/

  application:
    name: res-order  #此服务的服务名，在nacos服务器中显示，以示区分

server:
  port: 7001 # 此服务器的端口（注意各服务器的端口要区分）

management: # 通过actuator暴露此服务器的管理端口
  endpoints:
    web: # 通过web来管理API
      exposure:
        include: "*"  # *代表将所有的端口暴露，一定要加""，因为 * 是特殊字符，加""防止转义  info，health默认暴露

logging:
  level:
    root: info
    com.yc: info
    org.springframework: info
    com.yc.api.CartApi: DEBUG
    com.yc.api.ResfoodApi: DEBUG
  file:
    path: ./logs

mybatis-plus:
  configuration:
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl #开启SQL语句打印
#  type-enums-package: com.yc.bean

feign:
  client:
    config:
      default: #所有api服务
        connect-timeout: 10000
        read-timeout: 10000
  compression:
    request:
      enabled: true
      min-request-size: 2048 #超过2048的字节进行压缩
      mime-types: #可以被压缩的类型
        - text/xml
        - application/xml
        - application/json
    response:
      enabled: true
